#!/usr/bin/python

usage = """
Usage: aur-whitelist [-h|--help] [--config mylist.json] <packages...>

Whitelist Arch Linux AUR package to be included in the curated AUR.
This will save the name of the package together with the most recent git commit id.

Example:
    Whitelist latest version of xmake and build2 AUR packages:
    $ aur-whitelist xmake build2
""".rstrip().lstrip()

import sys, os, json, tempfile, subprocess
from pathlib import Path

from shutil import which
pager = "bat" if which("bat") else "less"

if len(sys.argv) == 1:
    print(usage)
    exit(0)

script_dir = Path(os.path.dirname(os.path.realpath(__file__)))
args = sys.argv[1:]

def error(msg):
    print(f"[error] {msg}")

def r(args, cwd=None, input=None, encoding=None):
    return subprocess.run(args, cwd=cwd, input=input, encoding=encoding)

def get(args, cwd=None):
    return subprocess.check_output(args, cwd=cwd).decode('utf-8').rstrip()

config_file = script_dir / ".." / "aur-whitelist.json"

while args[0].startswith("-"):
    if args[0] == "-h" or args[0] == "--help":
        print(usage)
        exit(0)

    if args[0] == "--config":
        if len(args) < 2:
            error("missing argument for --config flag.")
            exit(1)
        else:
            config_file = Path(args[1])
            args = args[2:]
        continue

pkgs = args

json_data = {}
if config_file.is_file():
    with open(config_file) as f:
        json_data = json.load(f)

for pkg in pkgs:
    with tempfile.TemporaryDirectory(prefix=f"aur-whitelist__") as tmp:
        tmp = Path(tmp)

        r(["git", "clone", "--quiet", f"https://aur.archlinux.org/{pkg}.git"], cwd=tmp)
        commit = get(["git", "rev-parse", "HEAD"], cwd=tmp / pkg)

        # proceed if no changes occur
        if pkg in json_data and json_data[pkg] == commit:
            print(f"accepted and up-to-date, skipping: {pkg}")
            continue

        accept = True

        diff = None
        is_new = not pkg in json_data
        if is_new:
            # https://stackoverflow.com/questions/40883798/how-to-get-git-diff-of-the-first-commit
            diff = get(["git", "--no-pager", "diff", "4b825dc642cb6eb9a060e54bf8d69288fbee4904", commit], cwd=tmp / pkg)
        else:
            diff = get(["git", "--no-pager", "diff", json_data[pkg], commit], cwd=tmp / pkg)

        while True:
            # show diff and ask for confirmation
            r([pager], input=diff, encoding="utf-8")
            answer = input(f"Accept changes for package {pkg}? :: [y]es :: [n]o (skip) :: [r]eview again :: [a]bort ? .. ")
            answer = answer.lower()

            # https://stackoverflow.com/questions/12586601/remove-last-stdout-line-in-python
            CURSOR_UP_ONE = '\x1b[1A'
            ERASE_LINE = '\x1b[2K'
            print(CURSOR_UP_ONE + ERASE_LINE + CURSOR_UP_ONE)

            if answer.startswith("y"):
                accept = True
                break
            elif answer.startswith("n"):
                accept = False
                break
            elif answer.startswith("r"):
                continue
            elif answer.startswith("a"):
                exit(1)

        if accept:
            if is_new:
                print(f"{commit} (new package) {pkg}")
            else:
                print(f"{commit} (update) {pkg}")
            json_data[pkg] = commit

with open(config_file, 'w') as json_file:
    json.dump(json_data, json_file, sort_keys = True, indent = 4, ensure_ascii = False)
    json_file.write("\n")
